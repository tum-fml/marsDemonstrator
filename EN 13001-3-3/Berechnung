import math
from collections import namedtuple
from Anhang import *


class RBG(): 
   
  #functions

    def __init__(self, wheel, rail):
        self.wheel = wheel
        self.rail = rail

    def compute_b(self):
      b = min(self.wheel.geometry.b_w, self.rail.geometry.b_r)
      self.wheel.variable_parameters['b']=b
      
    def Kontaktart (self):
        if self.wheel.geometry.r_k < (5*self.compute_b()):
              kontakt = "Punktkontakt"
        else: kontakt = "Linienkontakt" 
        self.wheel.variable_parameters['kontakart']= kontakt
        
           


    def compute_E_m (self):
        E_m = (2*self.wheel.material.E*self.rail.material.E)/ (self.rail.material.E + self.wheel.material.E)
        self.wheel.variable_parameters['E_m'] = E_m         
        

    #Modus1 
    
    def compute_F_rd_s_w (self):
     #Aufteilen
     if self.wheel.material.hardened == 'False':
         a=self.wheel.variable_parameters['E_m']*self.wheel.coefficients["Y_m"]
         b = ((7*self.wheel.material.HB)**2)*math.pi*self.wheel.variable_parameters["D_w"]*self.wheel.geometry.b_w*self.rail.factors["f_1"]*self.wheel.factors["f_2"]*(1-self.wheel.coefficients["v_w"])**2
         F_rd_s_w=b/a
     elif self.wheel.material.hardened == 'True':
         a=self.wheel.variable_parameters['E_m']*self.wheel.coefficients["Y_m"]
         b= (((4.2*self.wheel.material.f_y)**2)*math.pi*self.wheel.variable_parameters["D_w"]*self.wheel.geometry.b_w*self.rail.factors["f_1"]*self.wheel.factors["f_2"]*(1-self.wheel.coefficients["v_w"])**2)
         F_rd_s_w =b/a
     self.wheel.variable_parameters['F_rd_s_w']= F_rd_s_w 
     
    
    def compute_F_sd_f (self):
        F_sd_f=2500
        self.wheel.variable_parameters['F_sd_f']=F_sd_f
        self.rail.variable_parameters['F_sd_f']=F_sd_f
                                                                        

    def compute_F_sd_s (self):
        F_sd_s=2000
        self.wheel.variable_parameters['F_sd_s']=F_sd_s
        self.rail.variable_parameters['F_sd_s']=F_sd_s
                                                                          
    
    def compute_s_c (self):
       
       s_c = self.wheel.design_parameters["k_c"]*self.wheel.design_parameters["v_c"]
       #s_c = 10
       self.wheel.design_parameters['s_c']=s_c
       
    
    def compute_k_c (self):
        k_c=2
        self.wheel.design_parameters['k_c']=k_c
        
    
    def compute_i_tot (self):
        i_tot=400
        self.wheel.design_parameters['i_tot']=i_tot
        
    
    def compute_Î½_c (self):
        v_c=10
        self.wheel.design_parameters['v_c']=v_c
     
        

    
    def compute_F_u_w (self):
        
        if self.wheel.material.hardened == 'False' :
            F_u_w = ((3*self.wheel.material.HB)**2*math.pi*self.wheel.variable_parameters["D_w"]*self.wheel.geometry.b_w*(1-self.wheel.coefficients["v_w"]**2)/self.wheel.variable_parameters['E_m'])
        elif  self.wheel.material.hardened == 'True'  :
            F_u_w = ((1.8*self.wheel.material.f_y)**2*math.pi*self.wheel.variable_parameters["D_w"]*self.wheel.geometry.b_w*(1-self.wheel.coefficients["v_w"]**2)/self.wheel.variable_parameters['E_m'])
        self.wheel.variable_parameters["F_u_w"]=F_u_w
              

    
    
    def compute_F_rd_f_w(self):
        
        F_rd_f_w= (self.wheel.variable_parameters['F_u_w']*self.wheel.factors["f_f"])/(self.wheel.coefficients["Y_cf"]*(self.wheel.design_parameters["s_c"]**(1/self.wheel.coefficients["m"])))
        
        self.wheel.variable_parameters['F_rd_f_w']=F_rd_f_w
        

    
    
    def compute_F_rd_s_r(self):
        
        if self.hardened_r == False:
            a=self.wheel.variable_parameters['E_m']*self.wheel.coefficients["Y_m"]
            b= (((7*self.rail.material.HB)**2)*math.pi*self.wheel.variable_parameters["D_w"]*self.rail.geometry.b_r*self.rail.factors["f_1"]*self.wheel.factors["f_2"]*(1-self.rail.coefficients["v_r"])**2)
            F_rd_s_r=b/a
        else:
            a=self.wheel.variable_parameters['E_m']*self.wheel.coefficients["Y_m"]
            b= (((4.2*self.wheel.material.HB)**2)*math.pi*self.wheel.variable_parameters["D_w"]*self.rail.geometry.b_r*self.rail.factors["f_1"]*self.wheel.factors["f_2"]*(1-self.rail.coefficients["v_r"])**2)
            F_rd_s_r=b/a
        self.wheel.variable_parameters['F_rd_s_r']=F_rd_s_r
       
       


    def compute_F_u_r(self):
       
        if self.wheel.material.hardened == 'False' :
            F_u_r= ((3*self.rail.material.HB)**2*math.pi*self.wheel.variable_parameters["D_w"]*self.b_s*(1-self.rail.coefficients["v_r"]**2)/self.wheel.variable_parameters['E_m'])
        elif  self.wheel.material.hardened== 'True'  :
            F_u_r= ((1.8*self.wheel.material.f_y)**2*math.pi*self.wheel.variable_parameters["D_w"]*self.rail.geometry.b_r*(1-self.rail.coefficients["v_r"]**2)/self.wheel.variable_parameters['E_m'])
        self.wheel.variable_parameters['F_u_r']=F_u_r
        
        
    
    def compute_F_rd_f_r(self):
        F_rd_f_r= (self.wheel.variable_parameters['F_u_r']*self.wheel.factors["f_f"])/(self.wheel.coefficients["Y_cf"]*(self.wheel.design_parameters['s_c'])**(1/self.wheel.coefficients["m"]))    
        self.wheel.variable_parameters['F_rd_f_r']=F_rd_f_r
       

#Modus2
    
    def compute_D_w_Sf_min(self):
       
       if self.wheel.material.hardened == 'False' :
           D_w_Sf_min =(self.wheel.variable_parameters['F_sd_s']*self.wheel.coefficients["Y_m"]*self.wheel.variable_parameters['E_m'])/(((7*self.rail.material.HB)**2)*math.pi*float(self.wheel.variable_parameters['b'])*(1-self.wheel.coefficients["v_w"]**2)*self.rail.factors["f_1"]*self.wheel.factors["f_2"])
       elif self.wheel.material.hardened=='True' : 
           D_w_Sf_min =(self.wheel.variable_parameters['F_sd_s']*self.wheel.coefficients["Y_m"]*self.wheel.variable_parameters['E_m'])/(((1.2*self.wheel.material.f_y)**2)*math.pi*float(self.wheel.variable_parameters['b'])*(1-self.wheel.coefficients["v_w"]**2)*self.rail.factors["f_1"]*self.wheel.factors["f_2"])
       self.wheel.variable_parameters['D_w_Sf_min']=D_w_Sf_min
      
     
    def compute_D_w_Ef_min(self):
       
       if self.wheel.material.hardened == 'False' :
       
         a=self.wheel.factors["f_f"]*math.pi*(3*self.wheel.material.HB)**2*self.wheel.variable_parameters['b']*(1-self.wheel.coefficients["v_w"]**2)
         
         b=  (self.wheel.variable_parameters['F_sd_f']*self.wheel.coefficients["Y_cf"]*self.wheel.design_parameters['s_c']**(1/self.wheel.coefficients["m"])*self.wheel.variable_parameters['E_m'])
         
         D_w_Ef_min =b/a
       
       elif self.wheel.material.hardened == 'True' : 
           
           a=(self.wheel.factors["f_f"]*math.pi*(1.8*self.wheel.material.f_y)**2*self.wheel.variable_parameters['b']*(1-self.wheel.coefficients["v_w"]**2))
           b =  (self.wheel.variable_parameters['F_sd_f']*self.wheel.coefficients["Y_cf"]*self.wheel.design_parameters['s_c']**(1/self.wheel.coefficients["m"])*self.wheel.variable_parameters['E_m'])
           
           D_w_Ef_min=b/a
       
       self.wheel.variable_parameters['D_w_Ef_min']=D_w_Ef_min
       
    
    
    def compare_values(self):

       if self.wheel.variable_parameters["F_sd_f_w"] <= self.wheel.variable_parameters["F_rd_f_w"] :
           print( "Fatigue strength condition fulfilled, wheel configuration is safe to use ")
       elif     self.wheel.variable_parameters["F_sd_f_w"] > self.wheel.variable_parameters["F_rd_f_w"] :
           print("Fatigue strength condition not fulfiled, wheel configuration isn't safe to use ")

       if self.wheel.variable_parameters["F_sd_s_w"]  <= self.wheel.variable_parameters["F_rd_s_w"] : 
            print( "Static strength condition fulfilled, wheel configuration is safe to use ")
       elif self.wheel.variable_parameters["F_sd_s_w"]  > self.wheel.variable_parameters["F_rd_s_w"] :
            print ("Static strength condition not fulfiled, wheel configuration isn't safe to use ")   
           
       if self.rail.variable_parameters["F_sd_f_r"] <= self.rail.variable_parameters["F_rd_f_r"] :
           print( "Fatigue strength condition fulfilled, rail configuration is safe to use ")
       elif     self.rail.variable_parameters["F_sd_f_r"] > self.rail.variable_parameters["F_rd_f_r"] :
           print("Fatigue strength condition not fulfiled, rail configuration isn't safe to use ")
       
       if self.rail.variable_parameters["F_sd_s_r"]  <= self.rail.variable_parameters["F_rd_s_r"] : 
            print( "Static strength condition fulfilled, rail configuration is safe to use ")
       elif self.rail.variable_parameters["F_sd_s_r"]  > self.rail.variable_parameters["F_rd_s_r"] :
            print ("Static strength condition not fulfiled, rail configuration isn't safe to use ")   

    def get_wheel(self):
        return self.wheel

    def get_rail(self):
        return self.rail
  
  


        





        





