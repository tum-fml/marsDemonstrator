import math
from collections import namedtuple



Wheel= namedtuple("Wheel","material geometry design_parameters variable_parameters")
Wheel_geometry = namedtuple("Wheel_geometry", "b_w")
Wheel_material = namedtuple("Wheel_material", "name E hardened")

Rail= namedtuple("Rail", "material geometry design_parameters variable_parameters")
Rail_geometry= namedtuple("Rail_geometry", "b_r")
Rail_material= namedtuple("Rail_material", "name E hardened")




class RBG: 
    """def __init__(self, HB_w, HB_r, v_w, v_r, b_r, b_w, E_w, E_r, Y_m, Y_cf, m, D_w, f1, f2, f3, f4, f_f, f_y, r_k, r_3, hardened_s, hardened_w):

      
      wheel.material[2] = hardened_w
      self.hardened_s = hardened_s
      wheel.material[3] = HB_w
      rail.material[3] = HB_r
      wheel.coefficients["v_w"] = v_w
      rail.coefficients["v_r"] = v_r
      rail.geometry[0] = b_r
      wheel.geometry[0] = b_w
      wheel.material[1] = E_w
      rail.material[1] = E_r
      wheel.coefficients["Y_m"] = Y_m    
      wheel.coefficients["Y_cf"] = Y_cf
      wheel.coefficients["m"] = m
      wheel.variable_parameters["D_w"] = D_w
      wheel.factors["f_1"] = f1
      wheel.factors["f_2"] = f2
      wheel.factors["f_3"] = f3
      wheel.factors["f_4"] = f4
      wheel.factors["f_f"]=f_f
      wheel.material[4]=f_y
      wheel.geometry[1]=r_k
      rail.geometry[1]=r_3"""
      
    Wheel= namedtuple("Wheel","material geometry design_parameters variable_parameters factors coefficients")
    Wheel_material = namedtuple("Wheel_material", "name E_w hardened_w HB_w f_y")    
    Wheel_geometry = namedtuple("Wheel_geometry", "b_w r_k")    
    Wheel_variable_parameters={"D_w": None}
    Wheel_design_parameters={"k_c": 1,
                       "i_tot": None,
                       "v_c": None}    
    Wheel_factors={"f_1": 1,
                   "f_2": None,
                   "f_f":1 ,
                   "f_f1": 1, 
                   "f_f2": 1, 
                   "f_f3": 1, 
                   "f_f4": 1}    
    Wheel_coefficients={'Y_m': 1.1,
                       'Y_cf': 1.1,
                       'm': 10/3,
                       'v_w': 0.3,
                       'Y_p': 1 }

    wheel_geometry=Wheel_geometry(100,59)                  
    wheel_material=Wheel_material('name1',210000,True,5,8)
    wheel= Wheel(wheel_material, wheel_geometry, Wheel_design_parameters, Wheel_variable_parameters, Wheel_factors,Wheel_coefficients)
    
    Rail=namedtuple ("Rail", "material geometry design_parameters variable_parameters factors coefficients" )
    
    Rail_material = namedtuple("Wheel_material", "name E hardened HB_r f_y")    
    Rail_geometry = namedtuple("Wheel_geometry", "b_r r_3")    
    Rail_variable_parameters={}
    Rail_design_parameters={"k_c": 1,
                            "i_tot": None,
                            "v_c": None}    
    Rail_factors={ "f_1": 1088,
                   "f_2": None,
                   "f_f":1 ,
                   "f_f1": 1, 
                   "f_f2": 1, 
                   "f_f3": 1, 
                   "f_f4": 1}    
    Rail_coefficients={'Y_m': 1.1,
                       'Y_cf': 1.1,
                       'm': 10/3,
                       'v_r': 0.3,
                       'Y_p': 1 }
    
    rail_material=Rail_material("name2", 1200, True, 140, 1)
    rail_geometry=Rail_geometry(1400,300)

    rail=Rail(rail_material, rail_geometry, Rail_variable_parameters, Rail_design_parameters, Rail_factors, Rail_coefficients)
    
    m1=rail.factors["f_1"]
    print(m1)
    
'''   
    def compute_b(self): 
      b = min(wheel.geometry[0], rail.geometry[0])
      return b

    def Kontaktart (self):
        if wheel.geometry[1] < (5*compute_b) :
            kontakt = "Punktkontakt"
        else: kontakt = "Linienkontakt" 
        return kontakt  
           


    def compute_E_m (self):
        E_m = (2*wheel.material[1]*rail.material[1])/ (rail.material[1] + wheel.material[1])
        return E_m
   
    #Modus1 
    
    def compute_F_rd_s_w (self):
        
        if wheel.material[2]== False:
            F_rd_s_w = (((7*wheel.material[3])**2)*math.pi*wheel.variable_parameters["D_w"]*wheel.geometry[0]*rail.factors["f_1"]*wheel.factors["f_2"]*(1-wheel.coefficients["v_w"])**2)/(self.compute_E_m*wheel.coefficients["Y_m"])
        else:
            F_rd_s_w = (((4.2*wheel.material[4])**2)*math.pi*wheel.variable_parameters["D_w"]*wheel.geometry[0]*rail.factors["f_1"]*wheel.factors["f_2"]*(1-wheel.coefficients["v_w"])**2)/(self.compute_E_m*wheel.coefficients["Y_m"])
        return F_rd_s_w
    
    def compute_F_sd_f (self):
        return 100

    def compute_F_sd_s (self):
        return 200
    
    def compute_s_c (self):
       s_c = compute_k_c*compute_ν_c
       return s_c
    
    def compute_k_c (self):
        return 300
    
    def compute_i_tot (self):
        return 400
    
    def compute_ν_c (self):
        return 500

    
    def compute_F_u_w (self):
        
        if wheel.material[2] == False :
            F_u_w = ((3*wheel.material[3])**2*math.pi*wheel.variable_parameters["D_w"]*wheel.geometry[0]*(1-wheel.coefficients["v_w"]**2)/compute_E_m)
        elif  wheel.material[2]== True & wheel.material[3] > 0.6*wheel.material[4] :
            F_u_w = ((1.8*wheel.material[4])**2*math.pi*wheel.variable_parameters["D_w"]*wheel.geometry[0]*(1-wheel.coefficients["v_w"]**2)/compute_E_m)
        return F_u_w    

    
    
    def compute_F_rd_f_w(self):
        
        F_rd_f_w= (compute_F_u_w.F_u_w*wheel.factors["f_f"])/(wheel.coefficients["Y_cf"]*(compute_s_c)**(1/wheel.coefficients["m"]))
        return F_rd_f_w

    
    
    def compute_F_rd_s_r(self):
        
        if self.hardened_r== False:
            F_rd_s_r= (((7*rail.material[3])**2)*math.pi*wheel.variable_parameters["D_w"]*rail.geometry[0]*rail.factors["f_1"]*wheel.factors["f_2"]*(1-rail.coefficients["v_r"])**2)/(self.compute_E_m*wheel.coefficients["Y_m"])
        else:
            F_rd_s_r= (((4.2*wheel.material[4])**2)*math.pi*wheel.variable_parameters["D_w"]*rail.geometry[0]*rail.factors["f_1"]*wheel.factors["f_2"]*(1-rail.coefficients["v_r"])**2)/(self.compute_E_m*wheel.coefficients["Y_m"])
        return  F_rd_s_r


    def compute_F_u_r(self):
       
        if self.hardened_s == False :
            F_u_r= ((3*rail.material[3])**2*math.pi*wheel.variable_parameters["D_w"]*self.b_s*(1-rail.coefficients["v_r"]**2)/compute_E_m)
        elif  self.hardened_r== True & rail.material[3] > 0.6*wheel.material[4] :
            F_u_r= ((1.8*wheel.material[4])**2*math.pi*wheel.variable_parameters["D_w"]*rail.geometry[0]*(1-rail.coefficients["v_r"]**2)/compute_E_m)
        return F_u_r
    
    def compute_F_rd_f_r(self):
        F_rd_f_r= (compute_F_u_r*wheel.factors["f_f"])/(wheel.coefficients["Y_cf"]*(compute_s_c.s_c)**(1/wheel.coefficients["m"]))    
        return F_rd_f_r

#Modus2
    
    def compute_D_w_Ef_min(self):
       
       if self.hardened_s == False :
           D_w_Ef_min =(compute_F_sd_s*wheel.coefficients["Y_m"]*compute_E_m.E_m)/((7*rail.material[3])**2*math.pi*compute_b.b*(1-wheel.coefficients["v_w"]**2)*rail.factors["f_1"]*wheel.factors["f_2"])
       elif self.hardened_s==True &  rail.material[3] > 0.6*wheel.material[4]: 
           D_w_Sf_min =(compute_F_sd_s*wheel.coefficients["Y_m"]*compute_E_m.E_m)/((1.2*wheel.material[4])**2*math.pi*compute_b.b*(1-wheel.coefficients["v_w"]**2)*rail.factors["f_1"]*wheel.factors["f_2"])
       return D_w_Sf_min
    
    def compute_D_w_Ef_min(self):
       
       if self.hardened_s == False :
         D_w_Ef_min =  (compute_F_sd_f*wheel.coefficients["Y_cf"]*compute_s_c**(1/wheel.coefficients["m"])*compute_E_m)/(wheel.factors["f_f"]*math.pi*compute_b*(3*wheel.material[3])**2*(1-wheel.coefficients["v_w"]**2))
       elif self.hardened_s == True &  rail.material[3] > 0.6*wheel.material[4]: 
         D_w_Ef_min =  (compute_F_sd_f*wheel.coefficients["Y_cf"]*compute_s_c**(1/wheel.coefficients["m"])*compute_E_m)/(wheel.factors["f_f"]*math.pi*compute_b*(1.8*wheel.material[4])**2*(1-wheel.coefficients["v_w"]**2))
       return D_w_Ef_min


           '''







